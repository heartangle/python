# python初始 和 语言元素


"""
Python的优缺点
Python的优点很多，简单的可以总结为以下几点。

简单和明确，做一件事只有一种方法。
学习曲线低，跟其他很多语言相比，Python更容易上手。
开放源代码，拥有强大的社区和生态圈。
解释型语言，天生具有平台可移植性。
支持两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。
可扩展性和可嵌入性，可以调用C/C++代码，也可以在C/C++中调用Python。
代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。
————————————————————————————————————————————————————————————————————————————
Python的缺点主要集中在以下几点。

执行效率稍低，因此计算密集型任务可以由C/C++编写。
代码无法加密，但是现在的公司很多都不是卖软件而是卖服务，这个问题会被淡化。
在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。

Python的应用领域
目前Python在云基础设施、DevOps、网络爬虫开发、数据分析挖掘、机器学习等领域都有着广泛的应用，
因此也产生了Web后端开发、数据接口开发、自动化运维、自动化测试、科学计算和可视化、
数据分析、量化交易、机器人开发、图像识别和处理等一系列的职位。
"""
'''
import sys

print(sys.version_info)
print(sys.version)
'''



'''
import turtle

turtle.pensize(4)
turtle.pencolor('red')
turtle.forward(100)
turtle.right(90)
turtle.forward(100)
turtle.right(90)
turtle.forward(100)
turtle.right(90)
turtle.forward(100)
turtle.mainloop()
'''
"""——————————————————————————————————————————————————————————————————————————————————————"""

# 指令和程序
"""
计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。
其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。
“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。
"""

# 变量和类型
"""
在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，
变量的值可以被读取和修改，这是所有计算和控制的基础。
计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型

整型：Python中可以处理任意大小的整数（Python 2.x中有int和long两种类型的整数，但这种区分对Python来说意义不大，
因此在Python 3.x中整数只有int这一种了），而且支持二进制（如0b100，换算成十进制是4）、
八进制（如0o100，换算成十进制是64）、十进制（100）和十六进制（0x100，换算成十进制是256）的表示法。

浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，
一个浮点数的小数点位置是可变的，浮点数除了数学写法（如123.456）之外还支持科学计数法（如1.23456e2）。

字符串型：字符串是以单引号或双引号括起来的任意文本，比如'hello'和"hello",
字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，
而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。

布尔型：布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、
False表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如3 < 5会产生布尔值True，而2 == 1会产生布尔值False）。

复数型：形如3+5j，跟数学上的复数表示一样，唯一不同的是虚部的i换成了j
"""

# 变量命名
"""
硬性规则：
变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。
大小写敏感（大写的a和小写的A是两个不同的变量）。
不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。
PEP 8要求：
用小写字母拼写，多个单词用下划线连接。
受保护的实例属性用单个下划线开头（后面会讲到）。
私有的实例属性用两个下划线开头（后面会讲到）。
"""



'''
a = 321
b = 123
print(a + b)
print(a - b)
print(a * b)
print(a / b)
print(a // b)
print(a % b)
print(a ** b)
'''

"""
使用input函数输入
使用int()进行类型转换
用占位符格式化输出的字符串
"""

'''
a = int(input('a = '))
b = int(input('b = '))
print('%d + %d = %d' % (a, b, a + b))
print('%d // %d = %d' % (a, b, a // b))
print('%d ** %d = %d' % (a, b, a ** b))
'''

"""
使用type()检查变量的类型

"""

'''
a = 100
b = 12.345
c = 1 + 5j
d = 'hello world'
e = True

print(type(a))
print(type(int(b))
print(type(c))
print(type(d))
print(type(e))
'''

"""
在对变量类型进行转换时可以使用Python的内置函数
（准确的说下面列出的并不是真正意义上的函数，而是后面我们要讲到的创建对象的构造方法）。

int()：将一个数值或字符串转换成整数，可以指定进制。
float()：将一个字符串转换成浮点数。
str()：将指定的对象转换成字符串形式，可以指定编码。
chr()：将整数转换成该编码对应的字符串（一个字符）。
ord()：将字符串（一个字符）转换成对应的编码（整数）。
"""


'''
a = 5
b = 10
a /= b
print('a = ', a)
'''
'''
flag1 = 3 > 2
flag2 = 2 < 1
flag3 = flag1 and flag2
flag4 = flag1 or flag2
flag5 = not flag1
print("flag1 = ", flag1)
print("flag3 = ", flag3)
print("flag4 = " , flag4)
print("flag5 = ", flag5)
print(flag1 is True)
print(flag2 is not False)
'''

'''
# 华氏温度转为摄氏温度
f = float(input('请输入华氏温度：'))
c = (f-32)/1.8
print('%.1f华氏度 = %.1f摄氏度' %(f, c))
'''

'''
# 输入半径计算园的周长和面积
import math

while True:
	
	radius = float(input('请输入园的半径：'))
	perimetr = 2*math.pi*radius
	area = math.pi*radius*radius
	print('周长：%.2f' % perimetr)
	print('面积：%.2f' % area)
'''

'''
# 输入的年份判断是不是闰年

year = int(input('请输入年份：'))
is_leap = (year%4==0 and year%100!=0 or year%400==0)
print(is_leap)
'''















